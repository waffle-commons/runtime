name: PHP Granular Pipeline

on: workflow_dispatch
# Uncomment this to activate the workflow on a new component
#  push:
#    branches:
#      - main
#    tags:
#      - '*'
#  pull_request:

jobs:
  prepare:
    name: ‚öôÔ∏è Prepare Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          echo 'matrix={"operating-system":["ubuntu-24.04"],"php-version":["8.4"]}' >> $GITHUB_OUTPUT

  build:
    name: üèóÔ∏è Build & Install
    needs: prepare
    runs-on: ${{ matrix.operating-system }}
    outputs:
      matrix: ${{ needs.prepare.outputs.matrix }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer:v2

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-composer-

      - name: Install dependencies with Composer
        run: composer install --no-progress --prefer-dist --optimize-autoloader

  mago_fmt:
    name: üíÖ Formatter (Mago Fmt)
    needs: build
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.build.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer:v2
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
      - name: Install dependencies
        run: composer install --no-progress --prefer-dist
      - name: Check formatting with Mago Fmt
        run: vendor/bin/mago fmt --check

  mago_lint:
    name: üé® Linter (Mago Lint)
    needs: build
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.build.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer:v2
      - name: Cache and Install (will be fast)
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
      - run: composer install --no-progress --prefer-dist
      - name: Run Mago Lint
        run: vendor/bin/mago lint --reporting-format=github

  mago_analyze:
    name: üî¨ Static Analysis (Mago Analyze)
    needs: build
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.build.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer:v2
      - uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
      - run: composer install --no-progress --prefer-dist
      - name: Run Mago Analyze
        run: vendor/bin/mago analyze --reporting-format=github

  security_scan:
    name: üõ°Ô∏è Security Scan (SCA & SAST)
    needs: build
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.build.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer:v2
      - uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
      - run: composer install --no-progress --prefer-dist
      - name: Audit Composer dependencies (SCA)
        run: composer audit
      - name: Run Taint Analysis (SAST)
        run: vendor/bin/psalm --taint-analysis

  unit_tests:
    name: üß™ Tests (PHP ${{ matrix.php-version }})
    needs: [build, mago_lint, mago_analyze, security_scan]
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.build.outputs.matrix) }}
    if: failure() || success()
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: gd, pgsql, pdo_mysql, pdo_pgsql, gmp, fileinfo, intl, opcache, xml, iconv, redis, mailparse
          coverage: xdebug
          tools: composer:v2
      - uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
      - run: composer install --no-progress --prefer-dist
      - name: Run PHPUnit tests
        run: vendor/bin/phpunit --coverage-clover ./var/data/phpunit-coverage/clover.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./var/data/phpunit-coverage/clover.xml
        if: matrix.php-version == '8.4'